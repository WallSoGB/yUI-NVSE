#pragma once

#include "hkaRaycastInterface.hpp"
#include "BSSimpleArray.hpp"
#include "NiFixedString.hpp"
#include "NiAVObject.hpp"
#include "BSPrecisionTimer.hpp"
#include "NiPoint4.hpp"
#include "hkMatrix3x4.hpp"

class hkaRagdollInstance;
NiSmartPointer(bhkRagdollShareData);

class bhkRagdollController : public hkaRaycastInterface {
public:
	struct unk04C {
		struct RagdollParams
		{
			float fHierarchyGain;
			float fVelocityDamping;
			float fAccelerationGain;
			float fVelocityGain;
			float fPositionGain;
			float fPositionMaxLinearVelocity;
			float fPositionMaxAngularVelocity;
			float fSnapGain;
			float fSnapMaxLinearVelocity;
			float fSnapMaxAngularVelocity;
			float fSnapMaxLinearDistance;
			float fSnapMaxAngularDistance;
		};


		RagdollParams* ragdollParams;
		UInt32 unk004;
		UInt32 unk008;
		UInt32 unk00C;
		UInt32 unk010;
		UInt32 unk014;
		UInt32 unk018;
		UInt32 unk01C;
		UInt32 unk020;
		UInt32 unk024;
		UInt32 unk028;
		UInt32 unk02C;
		UInt32 unk030;
		UInt32 unk034;
		UInt32 unk038;
		UInt32 unk03C;
		UInt32 unk040;
		UInt32 unk044;
	};


	bool unk004;
	float unk008;
	UInt32 unk00C;
	hkMatrix3x4 unk010;
	UInt8 byte040;
	UInt8 byte041;
	UInt8 byte042;
	UInt8 byte043;
	bool unk044;
	hkaRagdollInstance* ragdollInstance;
	bhkRagdollController::unk04C* unk04C;
	UInt8 byte050;
	UInt8 gap051;
	UInt8 gap052;
	UInt8 gap053;
	UInt32 unk054;
	NiNode* bip01Node;
	UInt32 unk05C;
	NiMatrix3 matrix060;
	NiNodePtr spDebugLinesNode;
	UInt32 ptr088;
	UInt8 unk08C[4];
	UInt32 unk090;
	hkMatrix3x4* pkMatrices;
	UInt32 unk098;
	UInt32 unk09C;
	BSSimpleArray<NiAVObject*> kBones;
	UInt8 byte0B0;
	UInt8 isLookIK;
	UInt8 byte0B2;
	UInt8 gap0B3;
	bool unk0B4;
	UInt32 unk0B8;
	UInt32 unk0BC;
	NiPoint4 unk0C0;
	UInt32 unk0D0;
	UInt32 unk0D4;
	UInt32 unk0D8;
	UInt32 unk0DC;
	UInt32 unk0E0;
	UInt32 unk0E4;
	UInt32 unk0E8;
	UInt32 unk0EC;
	UInt32 unk0F0;
	UInt32 unk0F4;
	UInt32 unk0F8;
	UInt32 unk0FC;
	UInt32 unk100;
	UInt32 unk104;
	UInt32 unk108;
	UInt32 unk10C;
	UInt32 unk110;
	UInt32 unk114;
	UInt32 unk118;
	UInt32 unk11C;
	UInt32 unk120;
	UInt32 unk124;
	UInt32 unk128;
	UInt32 unk12C;
	UInt32 unk130;
	UInt32 unk134;
	UInt32 unk138;
	UInt32 unk13C;
	UInt32 unk140;
	UInt32 unk144;
	UInt32 unk148;
	UInt32 unk14C;
	UInt32 unk150;
	UInt32 unk154;
	UInt32 unk158;
	UInt32 unk15C;
	UInt32 unk160;
	UInt32 unk164;
	UInt32 unk168;
	UInt32 unk16C;
	UInt32 unk170;
	UInt32 unk174;
	UInt32 unk178;
	UInt32 unk17C;
	UInt8 byte180;
	UInt8 byte181;
	UInt8 gap182[2];
	UInt32 unk184;
	UInt32 unk188;
	UInt32 unk18C;
	UInt8 byte190;
	UInt8 byte191;
	UInt8 byte192;
	UInt8 byte193;
	UInt32 unk194;
	bool unk198;
	float unk19C;
	float unk1A0;
	UInt8 byte1A4[4];
	float unk1A8;
	UInt32 unk1AC;
	UInt32 unk1B0;
	UInt32 unk1B4;
	UInt32 unk1B8;
	UInt8 unk1BC[4];
	UInt32 unk1C0;
	UInt32 unk1C4;
	UInt32 unk1C8;
	UInt32 unk1CC;
	UInt32 unk1D0;
	UInt32 unk1D4;
	UInt32 unk1D8;
	UInt32 unk1DC;
	UInt32 unk1E0;
	UInt32 unk1E4;
	UInt32 unk1E8;
	UInt8 unk1EC[4];
	UInt32 unk1F0;
	UInt32 unk1F4;
	UInt32 unk1F8;
	UInt32 unk1FC;
	UInt32 unk200;
	UInt32 unk204;
	UInt32 unk208;
	UInt32 unk20C;
	UInt16 iLeftUpperArmIdx;
	UInt16 iLeftForeArmIdx;
	UInt16 iLeftHandIdx;
	UInt16 iRightUpperArmIdx;
	UInt16 iRightForeArmIdx;
	UInt16 iRightHandIdx;
	UInt8 byte21C;
	bool bIsGrabIK;
	UInt8 byte21E;
	UInt8 footIK21F;
	UInt8 isFootIK;
	UInt8 byte221;
	UInt8 byte222;
	UInt8 byte223;
	bool byte224_falseIfLibertyPrime;
	UInt8 gap225[3];
	UInt32 unk228;
	UInt32 unk22C;
	UInt32 unk230;
	UInt32 unk234;
	UInt16 unk238;
	UInt16 unk23A;
	float unk23C;
	bool byte240_trueIfLibertyPrime;
	UInt8 byte241;
	UInt8 byte242;
	UInt8 gap243;
	float unk244;
	UInt32 unk248;
	UInt32 deathPSAName;
	UInt32 unk250;
	UInt8 byte254;
	UInt8 gap255[3];
	UInt32 unk258;
	UInt32 unk25C;
	BSPrecisionTimer timer;
	UInt32 unk270;
	UInt32 unk274;
	UInt32 unk278;
	float unk27C;
	float unk280;
	bool unk284;
	UInt32 unk288;
	UInt8 byte28C;
	UInt8 byte28D;
	UInt8 byte28E;
	UInt8 byte28F;
	float unk290;
	UInt32 unk294;
	UInt32 unk298;
	UInt32 unk29C;
	NiFixedString* blockName;
	bhkRagdollShareDataPtr spRagdollShareData;
	LARGE_INTEGER PerformanceCount;
	UInt32 unk2B0;
	UInt32 unk2B4;
	UInt32 unk2B8;
	UInt32 unk2BC;
};

ASSERT_SIZE(bhkRagdollController, 0x2C0);